package net.yuanmomo.controller.mybatis;

import java.util.List;
import net.yuanmomo.bean.Temp;
import net.yuanmomo.bean.TempParam;
import net.yuanmomo.business.mybatis.TempBusiness;
import net.yuanmomo.mybatis.generator.util.AjaxResponseBean;
import net.yuanmomo.mybatis.generator.util.CollectionUtil;
import net.yuanmomo.mybatis.generator.util.PaginationBean;
import net.yuanmomo.mybatis.generator.util.PaginationUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping("/backend/temp/")
public class TempController {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbggenerated
     */
    private static Logger logger = LoggerFactory.getLogger(TempController.class);

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbggenerated
     */
    @Autowired 
    private TempBusiness tempBusiness;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbggenerated
     */
    @RequestMapping(value = "insert.do")
    @ResponseBody
    public AjaxResponseBean insert(@ModelAttribute("temp")  Temp temp) {
        try {
            // 数据校验
            
            this.tempBusiness.insertSelective(temp);
            return AjaxResponseBean.Const.SUCCESS_RESPONSE_BEAN;
        } catch (Exception e) {
            logger.error("插入异常" + e.getMessage());
            return AjaxResponseBean.getErrorResponseBean("插入异常" + e.getMessage());
        }
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbggenerated
     */
    @RequestMapping(value = "getTempByKey.do")
    @ResponseBody
    public AjaxResponseBean getTempByKey(@RequestParam("id")  Long id) {
        try {
            if(id == null || id < 0){
                return AjaxResponseBean.Const.PARAMETER_INVALID_ERROR_RESPONSE_BEAN; 
            }
            Temp result = this.tempBusiness.getTempByKey(id);
            return AjaxResponseBean.getReturnValueResponseBean(result);
        } catch (Exception e) {
            logger.error("主键获取详情异常;key="+id + e.getMessage());
            return AjaxResponseBean.getErrorResponseBean("主键获取详情异常;key="+id + e.getMessage());
        }
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbggenerated
     */
    @RequestMapping(value = "selectTempList.do")
    @ResponseBody
    public AjaxResponseBean selectTempList(@RequestParam("conditionType")  Short conditionType, @RequestParam("conditionValue")  String conditionValue, @ModelAttribute  PaginationBean paginationBean) {
        try {
            int currentPage = paginationBean.getPageNum();
            int pageSize = paginationBean.getNumPerPage(); 
            
            if(pageSize < 1){
                return AjaxResponseBean.Const.PARAMETER_INVALID_ERROR_RESPONSE_BEAN; 
            }
            if(currentPage<1){
                return AjaxResponseBean.Const.PARAMETER_INVALID_ERROR_RESPONSE_BEAN; 
            }
            // 构造查询参数
            TempParam param =new TempParam();
            
            TempParam.Criteria criteria = param.createCriteria();
            
            // 根据参数设置查询条件
            
            // 取得当前查询的总记录结果
            int total = this.tempBusiness.countTempList(param);
            if(total == 0){
                // 没有记录数
                return AjaxResponseBean.getNoDataReturnValueResponseBean();
            }
            paginationBean.setTotalCount(total);
            // 判断当前请求的页码有没有超过总页数
            int totalPages = PaginationUtil.getPages(total, pageSize);
            paginationBean.setTotalPages(totalPages);
            
            if(currentPage > totalPages){
                // 当前页超过总页数,取最大数
                currentPage = totalPages;
                paginationBean.setPageNum(currentPage);
            }
            
            // 设置排序
            // param.setOrderByClause(" id asc ");
            
            int start = (currentPage - 1) * pageSize;
            param.setStart(start);
            param.setCount(pageSize);
            
            List<Temp> configList = this.tempBusiness.selectTempList(param);
            
            paginationBean.setResult(configList);  // 返回数据结果
            return AjaxResponseBean.getReturnValueResponseBean(paginationBean);
        } catch (Exception e) {
            logger.error("查询异常" + e.getMessage());
            return AjaxResponseBean.getErrorResponseBean("查询异常" + e.getMessage());
        }
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbggenerated
     */
    @RequestMapping(value = "updateSaveTemp.do")
    @ResponseBody
    public AjaxResponseBean updateSaveTemp(@ModelAttribute  Temp temp) {
        try {
            if(temp == null ){
                // || NumberUtil.isNotPositive(temp.getId())){
                    return AjaxResponseBean.Const.PARAMETER_INVALID_ERROR_RESPONSE_BEAN;
                }
                int updateCount = this.tempBusiness.update(temp);
                if(updateCount >0 ){
                    return AjaxResponseBean.Const.SUCCESS_RESPONSE_BEAN;
                }
                return AjaxResponseBean.Const.ERROR_RESPONSE_BEAN;
            } catch (Exception e) {
                logger.error("更新异常" + e.getMessage());
                return AjaxResponseBean.getErrorResponseBean("更新异常" + e.getMessage());
            }
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbggenerated
     */
    @RequestMapping(value = "batchUpdateSaveTemp.do")
    @ResponseBody
    public AjaxResponseBean batchUpdateSaveTemp(@ModelAttribute  TempList tempList) {
        try {
            if(tempList != null && CollectionUtil.isNotNull(tempList.getTempList())){
                int updateCount = this.tempBusiness.update(tempList.getTempList());
                if(updateCount >0 ){
                    return AjaxResponseBean.Const.SUCCESS_RESPONSE_BEAN;
                }
            }
            return AjaxResponseBean.Const.ERROR_RESPONSE_BEAN;
        } catch (Exception e) {
            logger.error("批量更新异常" + e.getMessage());
            return AjaxResponseBean.getErrorResponseBean("批量更新异常" + e.getMessage());
        }
    }

    static class TempList {
        private List<Temp> tempList;

        public List<Temp> getTempList() {
            return tempList;
        }

        public void setTempList(List<Temp> tempList) {
            this.tempList = tempList;
        }
    }
}